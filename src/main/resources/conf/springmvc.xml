<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--声明组件扫描器-->
    <context:component-scan base-package="com.scnu.crm.settings.controller,
                                          com.scnu.crm.workbench.web.controller" />



    <!--声明 springmvc框架中的视图解析器， 帮助开发人员设置视图文件的路径-->
    <bean  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：视图文件的路径-->
        <property name="prefix" value="/workbench/" />
        <!--后缀：视图文件的扩展名-->
        <property name="suffix" value=".jsp" />
    </bean>

    <!--声明拦截器： 拦截器可以有0或多个-->
    <mvc:interceptors>
        <!--声明第一个拦截器-->
        <mvc:interceptor>
            <!--指定拦截的请求uri地址
                path：就是uri地址，可以使用通配符 **
                      ** ： 表示任意的字符，文件或者多级目录和目录中的文件
                http://localhost:8080/myweb/user/listUser.do
                http://localhost:8080/myweb/student/addStudent.do
            -->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/settings/user/login.do"/>
            <mvc:exclude-mapping path="/login.jsp"/>
            <mvc:exclude-mapping path="/**/*.js"/>
            <mvc:exclude-mapping path="/**/*.css"/>
            <mvc:exclude-mapping path="/**/*.png"/>
            <mvc:exclude-mapping path="/**/*.jpg"/>
            <!--声明拦截器对象-->
            <bean class="com.scnu.crm.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <mvc:annotation-driven />
    <!--
      1. 响应ajax请求，返回json
      2. 解决静态资源访问问题。
    -->

    <!--
    mvc:resources 加入后框架会创建 ResourceHttpRequestHandler这个处理器对象。
    让这个对象处理静态资源的访问，不依赖tomcat服务器。
    mapping:访问静态资源的uri地址， 使用通配符 **
    location：静态资源在你的项目中的目录位置。

    images/**:表示 images/p1.jpg  , images/user/logo.gif , images/order/history/list.png
-->
    <mvc:resources mapping="/jquery/**" location="/jquery/"/>
    <mvc:resources mapping="/ECharts/**" location="/ECharts/"/>
    <mvc:resources location="/image/" mapping="/image/**"/>
    <mvc:resources mapping="/settings/**" location="/settings/"/>
    <mvc:resources mapping="/workbench/**" location="/workbench/"/>



</beans>